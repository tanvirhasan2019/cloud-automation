apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mysql.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
    app.kubernetes.io/component: mysql
  {{- if .Values.statefulsetAnnotations }}
  annotations:
    {{- toYaml .Values.statefulsetAnnotations | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "mysql.headless.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "mysql.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mysql
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "mysql.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mysql
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mysql.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml .Values.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: volume-permissions
          image: "{{ .Values.volumePermissions.image.registry }}/{{ .Values.volumePermissions.image.repository }}:{{ .Values.volumePermissions.image.tag }}"
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              mkdir -p /bitnami/mysql
              chown -R {{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} /bitnami/mysql/
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
        - name: init-clone
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
            - |
              if [[ -z "$(ls -A /bitnami/mysql)" ]]; then
                echo "MySQL data directory is empty, cloning from primary if needed"
                POD_INDEX=$(echo ${POD_NAME} | awk -F'-' '{print $NF}')
                if [[ "$POD_INDEX" != "0" ]]; then
                  # Clone data from primary if this is a replica
                  echo "Waiting for primary to be ready..."
                  until nc -z {{ include "mysql.fullname" . }}-0.{{ include "mysql.headless.fullname" . }} 3306; do
                    sleep 1
                  done
                  echo "Primary is ready, starting clone..."
                  # Perform backup from primary
                  mysqldump \
                    --host={{ include "mysql.fullname" . }}-0.{{ include "mysql.headless.fullname" . }} \
                    --port=3306 \
                    --user=${MYSQL_REPLICATION_USER} \
                    --password=${MYSQL_REPLICATION_PASSWORD} \
                    --all-databases \
                    --triggers \
                    --routines \
                    --events > /tmp/backup.sql
                  
                  # Initialize replica with backup
                  echo "Initializing database with clone data..."
                  mysqld --initialize-insecure --datadir=/bitnami/mysql
                  mysqld_safe --datadir=/bitnami/mysql &
                  sleep 10
                  mysql -u root < /tmp/backup.sql
                  mysqladmin -u root shutdown
                  echo "Clone completed successfully"
                else
                  echo "This is the primary instance, skipping clone"
                fi
              else
                echo "MySQL data directory is not empty, skipping clone"
              fi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MYSQL_REPLICATION_USER
              value: {{ .Values.auth.replicationUser | quote }}
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.secretName" . }}
                  key: mysql-replication-password
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: tmp-mysql
              mountPath: /tmp
        {{- if .Values.initContainers }}
        {{- toYaml .Values.initContainers | nindent 8 }}
        {{- end }}
      containers:
        - name: mysql
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          command:
            - /bin/bash
            - -ec
            - |
              # Determine if this is primary or replica
              POD_INDEX=$(echo ${POD_NAME} | awk -F'-' '{print $NF}')
              if [[ "$POD_INDEX" == "0" ]]; then
                export MYSQL_REPLICATION_MODE=master
              else
                export MYSQL_REPLICATION_MODE=slave
                export MYSQL_MASTER_HOST={{ include "mysql.fullname" . }}-0.{{ include "mysql.headless.fullname" . }}
                export MYSQL_MASTER_PORT_NUMBER=3306
              fi
              
              exec /entrypoint.sh /run.sh
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.secretName" . }}
                  key: mysql-root-password
            - name: MYSQL_USER
              value: {{ .Values.auth.username | quote }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.secretName" . }}
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: {{ .Values.auth.database | quote }}
            - name: MYSQL_REPLICATION_USER
              value: {{ .Values.auth.replicationUser | quote }}
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.secretName" . }}
                  key: mysql-replication-password
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}
          ports:
            - name: mysql
              containerPort: 3306
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command: 
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command: 
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command: 
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: "{{ .Values.metrics.image.registry }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.secretName" . }}
                  key: mysql-root-password
          command:
            - /bin/sh
            - -c
            - |
              DATA_SOURCE_NAME="root:$MYSQL_ROOT_PASSWORD@(localhost:3306)/" /bin/mysqld_exporter
          ports:
            - name: metrics
              containerPort: 9104
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.sidecars }}
        {{- toYaml .Values.sidecars | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "mysql.configmap.fullname" . }}
        - name: tmp-mysql
          emptyDir: {}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "mysql.labels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}